<html>

<head>
  <title>swoole框架-Web服务器</title>
  <meta http-equiv=Content-Type content="text/html; charset=utf-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="../../../public/css/Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="../../../public/css/default.css" type="text/css" />
  <link rel="stylesheet" href="../../../public/css/code.css" type="text/css" />
  <link rel="stylesheet" href="../../../public/css/noframe.css" type="text/css" />
  <link rel="stylesheet" href="../../../public/css/bootstrap.css" type="text/css" />
</head>

<body style='text-justify-trim:punctuation'>

<div class="wiki_content blob instapaper_body">
       <article class="markdown-body entry-content" itemprop="mainContentOfPage">
                        <h1>Web服务器</h1>
                        <p>Swoole框架提供的WebServer有3种使用方法</p>

<h2>一、直接使用HttpServer</h2>

<p>HttpServer支持静态文件和include file。业务代码不需要写任何Server的代码，只需要设置document_root，并编写对应php文件。这种使用方法与Apache/Nginx+FPM类似。</p>

<p>server.php</p>

<pre><code class="php" data-language="php">$AppSvr = new Swoole\Network\Protocol\HttpServer();
$AppSvr-&gt;loadSetting("./swoole.ini"); //加载配置文件
$AppSvr-&gt;setDocumentRoot(__DIR__.'/webdocs/'); //设置document_root

$server = new \Swoole\Network\Server('0.0.0.0', 9501);
$server-&gt;setProtocol($AppSvr);
//$server-&gt;daemonize(); //作为守护进程
$server-&gt;run(array('worker_num' =&gt; 2, 'max_request' =&gt; 1000));
</code></pre>

<p>webdocs/index.php</p>

<pre><code class="php" data-language="php">&lt;?php
echo "hello world";
</code></pre>

<p>在浏览器中打开<a href="http://localhost:9501/index.php">http://localhost:9501/index.php</a></p>

<h2>二、继承HttpServer</h2>

<p>业务代码只需要继承此类，并自行实现onRequest方法即可。</p>

<pre><code class="php" data-language="php">    /**
     * 处理请求
     * @param $request
     * @return Swoole\Response
     */
    function onRequest(Swoole\Request $request)
</code></pre>

<p>onRequest方法参数为解析好的Request对象</p>

<ul>
<li>$request->post : $_POST</li>
<li>$request->get : $_GET</li>
<li>$request->cookie : $_COOKIES</li>
<li>$request->file  $_FILES</li>
</ul>

<p>onRequest方法必须返回一个Response对象</p>

<ul>
<li>$response->body 返回的HTML内容</li>
<li>$response->head HTTP头信息</li>
</ul>

<h2>三、使用AppServer</h2>

<p>基于AppServer类开发，就必须遵循Swoole MVC规范。具体可以查看examples/和apps/中的示例程序。
apps/目录中存放应用代码。</p>

<table>
<thead>
<tr>
  <th>目录</th>
  <th>说明</th>
</tr>
</thead>
<tbody>
<tr>
  <td>apps/controllers</td>
  <td>控制器代码</td>
</tr>
<tr>
  <td>apps/models</td>
  <td>数据模型代码</td>
</tr>
<tr>
  <td>apps/teamplets</td>
  <td>模板文件</td>
</tr>
<tr>
  <td>apps/config</td>
  <td>配置文件</td>
</tr>
</tbody>
</table>

        </article>
<hr>
<div id="ds-thread" class="ds-thread" data-url="http://wiki.swoole.com/wiki/page/106.html" data-title="Swoole扩展" data-thread-key="wiki-106">
<script type="text/javascript">
</div>
</div>


  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;Swoole流程</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>


<p class=MsoNormal><span lang=EN-US><img width=572 height=468
src="temp.files/image001.jpg"></span></p>

</div>

</body>

</html>
